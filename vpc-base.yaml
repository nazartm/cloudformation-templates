AWSTemplateFormatVersion: 2010-09-09
Description:
  VPC template comprised of two public subnets and two private subnets in different availability zones with NAT gateway enabling outband internet access and bastion hosts in public subnets
Parameters:
  NamePrefix:
    Description: Prefix for all resource names
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the bastion hosts
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[-_ a-zA-Z0-9]*'
    ConstraintDescription: 'can contain only alphanumeric characters, spaces, dashes and underscores.'
  BastionInstanceType:
    Description: Bastion instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid and allowed EC2 instance type.
Mappings:
  RegionImageMap:
    eu-central-1:
      '64': ami-c7ee5ca8
    eu-west-1:
      '64': ami-acd005d5
      
Resources:

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.185.0.0/20
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "vpc" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public

  # Public subnet resources
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.185.8.0/23 #10.185.8.1 - 10.185.9.254
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "public-subnet-a" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
          
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.185.10.0/23 #10.185.10.1 - 10.185.11.254
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "public-subnet-b" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "internet-gateway" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "public-route-table" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public

  PublicSubnetInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "public-network-acl" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public

  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  InboundHTTPSPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  InboundSSHPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'

  InboundDynamicPortsPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  PublicNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl

  PublicNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNetworkAcl

  # Private subnet resources
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.185.0.0/22 #10.185.0.1 - 10.185.3.254
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "private-subnet-a" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private

  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.185.4.0/22 #10.185.4.1 - 10.185.7.254
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "private-subnet-b" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private

  PrivateRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "private-route-table-a" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private

  PrivateRouteTableB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "private-route-table-b" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private

  PrivateRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  PrivateRouteA:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  PrivateRouteB:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB

  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "private-network-acl" ] ]
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private

  InboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  PrivateSubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref PrivateNetworkAcl

  NATIPAddressA:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NATIPAddressB:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  
  NATGatewayA:
    DependsOn: VPCGatewayAttachment  
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NATIPAddressA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "nat-gateway-a" ] ]

  NATGatewayB:
    DependsOn: VPCGatewayAttachment  
    Type: "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: !GetAtt NATIPAddressB.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "nat-gateway-b" ] ]

  BastionHostA:
    Type: 'AWS::EC2::Instance'
    DependsOn: VPCGatewayAttachment
    Properties:
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [ RegionImageMap, !Ref "AWS::Region", 64 ] 
      NetworkInterfaces:
        - GroupSet:
            - !Ref BastionSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "bastion-a" ] ]

  BastionHostB:
    Type: 'AWS::EC2::Instance'
    DependsOn: VPCGatewayAttachment
    Properties:
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [ RegionImageMap, !Ref "AWS::Region", 64 ] 
      NetworkInterfaces:
        - GroupSet:
            - !Ref BastionSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Join [ "-" , [ !Ref NamePrefix, "bastion-b" ] ]

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to the bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  InternalSSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow ssh access from bastion
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress: []

Outputs:
  VpcId:
    Description: VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: Public subnet
    Value: !Join [ "," , [ !Ref PublicSubnetA, !Ref PublicSubnetB ] ]
  PrivateSubnets:
    Description: Private subnet
    Value: !Join [ "," , [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ] ]
  AvailabilityZones:
    Description: Availability zones
    Value: !Join [',', [ !GetAtt ["PrivateSubnetA", "AvailabilityZone"], !GetAtt ["PrivateSubnetB", "AvailabilityZone"] ] ]
  InternalSSHSecurityGroupId:
    Description: Internal ssh security group
    Value: !Ref InternalSSHSecurityGroup
